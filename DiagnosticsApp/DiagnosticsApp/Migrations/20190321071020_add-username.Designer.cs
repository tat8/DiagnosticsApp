// <auto-generated />
using System;
using DiagnosticsApp.DatabaseModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiagnosticsApp.Migrations
{
    [DbContext(typeof(DiagnosticsDBContext))]
    [Migration("20190321071020_add-username")]
    partial class addusername
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DiagnosticsApp.DatabaseModels.Appointment", b =>
                {
                    b.Property<long>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("appointmentId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnName("clientId");

                    b.Property<long>("DoctorId")
                        .HasColumnName("doctorId");

                    b.Property<long>("ExaminationId")
                        .HasColumnName("examinationId");

                    b.Property<string>("Prescription")
                        .IsRequired()
                        .HasColumnName("prescription")
                        .HasMaxLength(200);

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("startTime")
                        .HasColumnType("datetime");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId", "StartTime")
                        .IsUnique()
                        .HasName("IX_Appointment");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("DiagnosticsApp.DatabaseModels.AppointmentDiagnosis", b =>
                {
                    b.Property<long>("AppointmentId")
                        .HasColumnName("appointmentId");

                    b.Property<long>("DiagnosisId")
                        .HasColumnName("diagnosisId");

                    b.HasKey("AppointmentId", "DiagnosisId");

                    b.HasIndex("AppointmentId", "DiagnosisId")
                        .IsUnique()
                        .HasName("IX_AppointmentDiagnosis");

                    b.ToTable("AppointmentDiagnosis");
                });

            modelBuilder.Entity("DiagnosticsApp.DatabaseModels.Client", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clientId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birthDate")
                        .HasColumnType("date");

                    b.Property<string>("FatherName")
                        .HasColumnName("fatherName")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsMale")
                        .HasColumnName("isMale");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(50);

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnName("passport")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("phoneNumber")
                        .HasMaxLength(10);

                    b.Property<string>("Snils")
                        .IsRequired()
                        .HasColumnName("SNILS")
                        .HasMaxLength(50);

                    b.HasKey("ClientId");

                    b.HasIndex("Snils")
                        .IsUnique()
                        .HasName("IX_Client");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("DiagnosticsApp.DatabaseModels.Diagnosis", b =>
                {
                    b.Property<long>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("diagnosisId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiagnosisName")
                        .IsRequired()
                        .HasColumnName("diagnosisName")
                        .HasMaxLength(100);

                    b.HasKey("DiagnosisId");

                    b.HasIndex("DiagnosisName")
                        .IsUnique()
                        .HasName("IX_Diagnosis");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("DiagnosticsApp.DatabaseModels.Diagnostics", b =>
                {
                    b.Property<long>("DiagnosticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("diagnosticsId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnName("clientId");

                    b.Property<long>("DoctorId")
                        .HasColumnName("doctorId");

                    b.Property<long?>("ExaminationId")
                        .HasColumnName("examinationId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("startTime")
                        .HasColumnType("datetime");

                    b.HasKey("DiagnosticsId");

                    b.HasIndex("DoctorId", "StartTime")
                        .IsUnique()
                        .HasName("IX_Diagnostics");

                    b.ToTable("Diagnostics");
                });

            modelBuilder.Entity("DiagnosticsApp.DatabaseModels.Examination", b =>
                {
                    b.Property<long>("ExaminationId")
                        .HasColumnName("examinationId");

                    b.Property<string>("Breath")
                        .IsRequired()
                        .HasColumnName("breath")
                        .HasMaxLength(50);

                    b.Property<string>("Complaint")
                        .IsRequired()
                        .HasColumnName("complaint")
                        .HasMaxLength(200);

                    b.Property<int>("Height")
                        .HasColumnName("height");

                    b.Property<string>("Other")
                        .HasColumnName("other")
                        .HasMaxLength(200);

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnName("pressure")
                        .HasMaxLength(50);

                    b.Property<double>("Temperature")
                        .HasColumnName("temperature");

                    b.Property<int>("Weight")
                        .HasColumnName("weight");

                    b.HasKey("ExaminationId");

                    b.ToTable("Examination");
                });

            modelBuilder.Entity("DiagnosticsApp.DatabaseModels.Image", b =>
                {
                    b.Property<long>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("imageId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CalcinateBiggest")
                        .HasColumnName("calcinateBiggest");

                    b.Property<int?>("CalcinatesCount")
                        .HasColumnName("calcinatesCount");

                    b.Property<double?>("CalcinatesPercent")
                        .HasColumnName("calcinatesPercent");

                    b.Property<long>("DiagnosticsId")
                        .HasColumnName("diagnosticsId");

                    b.Property<string>("RefNotParsed")
                        .IsRequired()
                        .HasColumnName("refNotParsed")
                        .HasMaxLength(50);

                    b.Property<string>("RefParsed")
                        .HasColumnName("refParsed")
                        .HasMaxLength(50);

                    b.HasKey("ImageId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("DiagnosticsApp.DatabaseModels.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("roleId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("roleName")
                        .HasMaxLength(50);

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasName("IX_Role");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DiagnosticsApp.DatabaseModels.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FatherName")
                        .HasColumnName("fatherName")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasMaxLength(50);

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnName("INN")
                        .HasMaxLength(12);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(50);

                    b.Property<long>("RoleId")
                        .HasColumnName("roleId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("Inn")
                        .IsUnique()
                        .HasName("IX_User");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("IX_Username");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DiagnosticsApp.DatabaseModels.UserPassword", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.ToTable("UserPassword");
                });
#pragma warning restore 612, 618
        }
    }
}
